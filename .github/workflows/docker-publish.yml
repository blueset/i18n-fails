name: Docker Build and Publish

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PAYLOAD_SECRET: ${{ vars.PAYLOAD_SECRET }}
  CRON_SECRET: ${{ vars.CRON_SECRET }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test connection to VPS
        run: |
          curl -v http://${{ secrets.VPS_HOST }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long

      - name: Execute MongoDB dump
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          protocol: tcp
          script: |

      - name: copy file via ssh
        run: |
          mkdir -v -m 700 $HOME/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} > $HOME/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 400 $HOME/.ssh/id_rsa

          ssh -i $HOME/.ssh/id_rsa ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            
            # Get current timestamp for backup name
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            cd ${{ secrets.MONGO_PATH }}

            # Create dump in the container
            docker compose exec mongo mongodump --out=/tmp/backup
            
            # Copy dump from container to host
            docker compose cp mongo:/tmp/backup /tmp/mongodb_backup_${TIMESTAMP}
            
            # Create tar archive
            cd /tmp
            tar -czf mongodb_backup_${TIMESTAMP}.tar.gz mongodb_backup_${TIMESTAMP}
            
            # Clean up container's temporary files
            cd ${{ secrets.MONGO_PATH }}
            docker compose exec mongo rm -rf /tmp/backup
          EOF

          scp -i $HOME/.ssh/id_rsa ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/tmp/mongodb_backup_*.tar.gz ./mongodb-backup/

          ssh -i $HOME/.ssh/id_rsa ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} rm -rf /tmp/mongodb_backup_*

      - name: Cleanup MongoDB backup
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          protocol: tcp
          script: |
            rm -rf /tmp/mongodb_backup_*

      - name: Write .env file
        run: |
          echo "PAYLOAD_SECRET=${{ vars.PAYLOAD_SECRET }}" >> .env
          echo "CRON_SECRET=${{ vars.CRON_SECRET }}" >> .env
          echo "VERCEL_PROJECT_PRODUCTION_URL=i18nfails.1a23.studio" >> .env
          echo "NEXT_PUBLIC_SERVER_URL=https://i18nfails.1a23.studio" >> .env

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Cleanup MongoDB backup
        if: always()
        run: |
          rm -rf mongodb-backup/